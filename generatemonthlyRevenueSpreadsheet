function generatemonthlyRevenueSpreadsheet() {
  var client_id='';
  var secret_id='';
  
  try{
    var authorizationObj = getAuthorizationToken(client_id,secret_id);    
    if(authorizationObj.error==true){
    //Send Error to admin 
    throw(new Error(authorizationObj.message));
    }
    var authorizationToken=authorizationObj.access_token;
    
    var vals =[0,100,200,300,400];
    var outputRows=[];
    vals.forEach(function(val){
      paidInvoiceObj=getPaidInvoice(authorizationToken,val,100);
      if(paidInvoiceObj.error){
        throw(new Error(paidInvoiceObj.message));
      }
      if(paidInvoiceObj.invoices.length>0){
        var htmlBody = htmlifyObject(paidInvoiceObj.invoices);
        outputRows=outputRows.concat(htmlBody);
      }
      
    });
    
    
    if(outputRows.length>0){
      var monthwiseOutput={};
      outputRows.forEach(function(outputRow){
        var res = outputRow[2].split(" ");
        var res = res[0].split("-");
        var dateStr=res[0]+'-'+res[1];
        Logger.log(res);
        Logger.log(outputRow[2].split(" "))

        Logger.log(dateStr);
        var amount= parseInt(outputRow[3]);
        if(monthwiseOutput[dateStr]){
          monthwiseOutput[dateStr]=monthwiseOutput[dateStr]+amount;
        }else{
          monthwiseOutput[dateStr]=amount;
        }
      });
      

      var years=[2020,2019,2018,2017,2016,2015];
      var months=["12","11","10","09","08","07","06","05","04","03","02","01"];
      var sheetOutput=[];
      years.forEach(function(year){
        months.forEach(function(month){
          Logger.log(year+'-'+month);
          if(monthwiseOutput[year+'-'+month]){

            var temp=[];
            temp.push(year+'-'+month);
            temp.push(monthwiseOutput[year+'-'+month]);
            

            sheetOutput.push(temp);
          }
        });
      });
      Logger.log(sheetOutput.length);

      var ss = SpreadsheetApp.getActiveSpreadsheet();
    var sheet = ss.getSheets()[0];
    var range = sheet.getRange(6, 1, sheetOutput.length, 2);
      Logger.log(range.getValues());
    range.setValues(sheetOutput);
    }
    
  }catch(e){
    Logger.log(e.message);  
    MailApp.sendEmail("hamza.agreed@gmail.com","Contact Admin- Automated invoicing Api not working",e.message);
  }
}





function getPaidInvoice(authorizationToken,pageStart,pageSize){
  head = {
    'Authorization':"Bearer "+ authorizationToken,
    'Content-Type': 'application/json'
  }
   params = {
    headers:  head,
    method : "post",
    muteHttpExceptions: true, 
     payload : JSON.stringify({
       status: ["PAID"],
       page:pageStart,
       page_size:pageSize
     })
   }
  tokenEndpoint='https://api.paypal.com/v1/invoicing/search';
  request = UrlFetchApp.getRequest(tokenEndpoint, params); 
  response = UrlFetchApp.fetch(tokenEndpoint, params); 
  
  var responseCode = response.getResponseCode();
  var responseBody = response.getContentText();
   var paidInvoiceResponse={};
  if (responseCode === 200) {
    var responseJson = JSON.parse(responseBody);
    paidInvoiceResponse.error=false;
    paidInvoiceResponse.invoices=responseJson.invoices;
    return paidInvoiceResponse;

    } else {
      paidInvoiceResponse.error=true;
      paidInvoiceResponse.message=Utilities.formatString("Request failed. Expected 200, got %d: %s", responseCode, responseBody);
      return paidInvoiceResponse;
    }   

}

function htmlifyObject(invoices){
  

  var outputValues=[];
  invoices.forEach(function(invoice){
    var row=[];

    // add invoice number

    if(invoice.id){
          row.push(invoice.id);
    }else{
          row.push('N/A');     
    }
    //add merchant email
    if(invoice.billing_info&&invoice.billing_info.length>0&&invoice.billing_info[0].email){
      row.push(invoice.billing_info[0].email);
    }else{
          row.push('N/A'); 
    }
    //add invoice DAte
    if(invoice.invoice_date){
      row.push(invoice.invoice_date);
    }else{
          row.push('N/A'); 
    }
    //add total amount
    if(invoice.total_amount&&invoice.total_amount.value){
      row.push(invoice.total_amount.value);      
    }else{
          row.push('N/A'); 
    }
    // add status
    if(invoice.status){
      row.push(invoice.status);   
    }else{
          row.push('N/A'); 
    }
    outputValues.push(row);
  });  
  return outputValues;
}




function getAuthorizationToken(client_id,secret_id){
  var tokenEndpoint = "https://api.paypal.com/v1/oauth2/token";
    var head = {
      'Authorization':"Basic "+ Utilities.base64Encode(client_id+':'+secret_id),
      'Accept': 'application/json',
      'Content-Type': 'application/x-www-form-urlencoded'
    }
    var postPayload = {
        "grant_type" : "client_credentials"
    }
    var params = {
        headers:  head,
        contentType: 'application/x-www-form-urlencoded',
        method : "post",
        muteHttpExceptions: true,
        payload : postPayload      
    }
    var request = UrlFetchApp.getRequest(tokenEndpoint, params); 
    var response = UrlFetchApp.fetch(tokenEndpoint, params); 
    var responseCode = response.getResponseCode()
    var responseBody = response.getContentText()

    if (responseCode === 200) {
      var tokenResponse={};
      var responseJson = JSON.parse(responseBody);
      if(responseJson&&responseJson.error){
        tokenResponse.error=true;
        tokenResponse.message=responseJson.error;
        return tokenResponse;
      }
      if(responseJson.access_token){
        tokenResponse.error=false;
        tokenResponse.access_token=responseJson.access_token;
        return tokenResponse;
      }
     tokenResponse.error=true;
     tokenResponse.message='Access Token not found';
     return tokenResponse;
    } else {
        var tokenResponse={};
        tokenResponse.error=true;
        tokenResponse.message=Utilities.formatString("Request failed. Expected 200, got %d: %s", responseCode, responseBody);
        return tokenResponse;
      }
}

